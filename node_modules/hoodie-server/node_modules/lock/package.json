{
  "name": "lock",
  "version": "0.0.3",
  "homepage": "https://github.com/dominictarr/lock",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/lock.git"
  },
  "dependencies": {
    "tape": "~0.2.2"
  },
  "devDependencies": {},
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com",
    "url": "http://dominictarr.com"
  },
  "license": "MIT",
  "readme": "# lock\n\nlock asynchronous resources.\n\n## Simple Example\n\n``` js\nvar Lock = require('lock')\nvar lock = Lock()\n\nlock('key', function (release) { //called when resource is available.\n\n  //do an async operation, and wrap the callback with release.\n  someAsyncOperation(args,..., release(function (err) {\n    //'key' is not unlocked!\n  })\n})\n```\n\n## Multiple Locks at Once.\n\n``` js\nvar Lock = require('lock')\nvar lock = Lock()\n\nlock(['A', 'B', 'C'], function (release) { //called, when ALL\n                                           //resources are available.\n\n  //do an async operation, and wrap the callback with release(cb)\n  someAsyncOperation(args,..., release(function (err) {\n    //A, B & C are now unlocked!\n  })\n})\n```\n\nused in [level-update](https://github.com/dominictarr/level-update)\n\n## License\n\nMIT\n\n",
  "readmeFilename": "README.md",
  "_id": "lock@0.0.3",
  "description": "lock asynchronous resources.",
  "dist": {
    "shasum": "21e0d04e86f446b1fc970c103a1ccdec5ce6a26b",
    "tarball": "http://registry.npmjs.org/lock/-/lock-0.0.3.tgz"
  },
  "_from": "lock@^0.0.3",
  "_npmVersion": "1.2.3",
  "_npmUser": {
    "name": "dominictarr",
    "email": "dominic.tarr@gmail.com"
  },
  "maintainers": [
    {
      "name": "dominictarr",
      "email": "dominic.tarr@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "21e0d04e86f446b1fc970c103a1ccdec5ce6a26b",
  "_resolved": "https://registry.npmjs.org/lock/-/lock-0.0.3.tgz"
}
