{
  "name": "hoodie-plugins-api",
  "version": "0.2.1",
  "description": "Hoodie interface to CouchDB",
  "main": "lib/index.js",
  "dependencies": {
    "couchr": "0.0.13",
    "uuid": "1.4.1",
    "async": "0.2.8",
    "moment": "2.1.0",
    "underscore": "1.4.4"
  },
  "devDependencies": {
    "multicouch": "0.8.1",
    "nodeunit": "0.8.2",
    "rimraf": "2.1.4",
    "mkdirp": "0.3.5",
    "request": "2.31.0"
  },
  "scripts": {
    "test": "nodeunit test"
  },
  "_id": "hoodie-plugins-api@0.2.1",
  "dist": {
    "shasum": "4b2139a0acba408eeac37fe4e8718eb7a5f0581b",
    "tarball": "http://registry.npmjs.org/hoodie-plugins-api/-/hoodie-plugins-api-0.2.1.tgz"
  },
  "_from": "hoodie-plugins-api@0.2.1",
  "_npmVersion": "1.3.2",
  "_npmUser": {
    "name": "caolan",
    "email": "caolan.mcmahon@gmail.com"
  },
  "maintainers": [
    {
      "name": "caolan",
      "email": "caolan.mcmahon@gmail.com"
    },
    {
      "name": "svnlto",
      "email": "me@svenlito.com"
    },
    {
      "name": "gr2m",
      "email": "gregor@martynus.net"
    },
    {
      "name": "jan",
      "email": "jan@apache.org"
    },
    {
      "name": "espy",
      "email": "hello@alexfeyerke.com"
    }
  ],
  "directories": {},
  "_shasum": "4b2139a0acba408eeac37fe4e8718eb7a5f0581b",
  "_resolved": "https://registry.npmjs.org/hoodie-plugins-api/-/hoodie-plugins-api-0.2.1.tgz",
  "readme": "# Hoodie Plugin API\n\n## File and directory structure\n\n```\n/hoodie-plugin-plugin_name\n    /pocket\n    hoodie.plugin_name.js\n    index.js\n    package.json\n```\n\n* __/pocket__ - Extends the Pocket admin interface (contains a HTML fragment with code and styles)\n* __hoodie.plugin_name.js__ - Extends the hoodie.js front-end API\n* __index.js__ - Node.js worker for handling tasks and other events (this is just the default location, you have more options here, see below)\n* __package.json__ - The plugin's metadata and dependencies (since the plugin should function as an npm module)\n\nThe server-side component of the plugin can be left in an index.js for simplicity, but Hoodie will prefer the following, if present:\n* Whatever you reference under `main` in the plugin's `package.json`\n* Whatever you get when you `require()` the plugin root directory\n\n## Writing workers\n\n```javascript\n// Initializing a worker\nmodule.exports = function (hoodie, callback) {\n    // hoodie object is client to hoodie backend, documented below.\n    // call callback when setup complete (with optional error if worker failed to initialize).\n    // ...\n};\n\n\n// make HTTP requests directly to CouchDB (ideally, you would never need to use this)\nhoodie.request(method, path, options, callback)\n\n// get / set plugin configuration\nhoodie.config.get(key)\nhoodie.config.set(key, value)\n\n// list all databases\nhoodie.database.findAll(callback)\n\n// create a new database\nhoodie.database.add(name, callback)\n\n// remove a database\nhoodie.database.remove(name, callback)\n\n// get a database object to make calls against\nhoodie.database(name) => db\n\n// add a document to db\ndb.add(type, attrs, callback)\n\n// update a document in db\ndb.update(type, id, changed_attrs, callback)\n\n// get a document from db\ndb.find(type, id, callback)\n\n// get all documents from db\ndb.findAll(callback)\n\n// get all documents of a single type in db\ndb.findAll(type, callback)\n\n// remove a document from db\ndb.remove(type, id, callback)\n\n// remove all documents of type in db\ndb.removeAll(type, callback)\n\n// grant read access to everyone on db by updating CouchDB security\ndb.grantPublicReadAccess(callback)\n\n// grant write access to everyone on db\ndb.grantPublicWriteAccess(callback)\n\n// grant read access to specific user on db by updating CouchDB security\ndb.grantReadAccess(account_type, account_id, callback)\n\n// grant write access to specific user on db by adding role (checked by design doc in db)\ndb.grantWriteAccess(account_type, account_id, callback)\n\n// update db security so it's no longer publicly readable\ndb.revokePublicReadAccess(callback)\n\n// update db security so it's no longer publicly writable\ndb.revokePublicWriteAccess(callback)\n\n// remove user from couchdb readers for db\ndb.revokeReadAccess(account_type, account_id, callback)\n\n// remove role from user so they cannot write to db (checked by design doc)\ndb.revokeWriteAccess(account_type, account_id, callback)\n\n\n// Index / Query API is not yet implemented, see:\n// https://github.com/hoodiehq/hoodie-plugins-api/issues/3\n\n// creates new design doc with CouchDB view on db\ndb.addIndex(name, {map: .., reduce: ..}, callback)\n\n// removes design doc for couchdb view on db\ndb.removeIndex(name, callback)\n\n// query a couchdb view on db\ndb.query(index, options, callback)\n\n\n//\n// hoodie.account API\n//\nhoodie.account.add(type, attrs, callback)\nhoodie.account.update(type, id, changed_attrs, callback)\nhoodie.account.find(type, id, callback)\nhoodie.account.findAll(callback)\nhoodie.account.findAll(type, callback)\nhoodie.account.remove(type, id, callback)\nhoodie.account.removeAll(type, callback)\n\n// hoodie.account events\nhoodie.account.on('change', handler)\nhoodie.account.on('change:type', handler)\n\n// use case: \n// handle password resets\nhoodie.account.on('change:$passwordReset', function(object) {\n  // set new password in user doc & send it via email\n})\n\n\n//\n// listen to task document events\n//\nhoodie.task.on('change', function (db, doc) { ... })\nhoodie.task.on('change:type', function (db, doc) { ... })\n\n// add / remove sources (database) to listen for new tasks\nhoodie.task.addSource( databaseName )\nhoodie.task.removeSource( databaseName )\n\n// mark task as complete\nhoodie.task.success( databaseName, taskDoc, [callback] )\n\n// mark task as errored\nhoodie.task.error( databaseName, taskDoc, error, [callback] )\n\n// send emails\nhoodie.sendEmail({\n    from: \"Fred Foo ✔ <foo@blurdybloop.com>\", // sender address\n    to: \"bar@blurdybloop.com, baz@blurdybloop.com\", // list of receivers\n    subject: \"Hello ✔\", // Subject line\n    text: \"Hello world ✔\", // plaintext body\n    html: \"<b>Hello world ✔</b>\" // html body\n}, callback)\n\n// sending emails uses nodemailer API:\n// https://github.com/andris9/Nodemailer\n\n// you can also pass attachments as dataURIs:\nhoodie.sendEmail({\n  to: 'test@example.com',\n  from: 'hoodie@example.com',\n  subject: 'test',\n  text: 'blah blah',\n  attachments: [\n    {dataURI: 'data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D', ...}\n  ]\n}, callback);\n\n// please note, the 'filePath' property usable on attachments in nodemail\n// will be stripped in hoodie to prevent accidentally emailing out files\n// from the server\n```\n",
  "readmeFilename": "README.md"
}
