(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Pocket.SidebarView = (function(_super) {

    __extends(SidebarView, _super);

    function SidebarView() {
      this.renderPlugins = __bind(this.renderPlugins, this);

      this.updateUserCount = __bind(this.updateUserCount, this);

      this.renderAppName = __bind(this.renderAppName, this);
      return SidebarView.__super__.constructor.apply(this, arguments);
    }

    SidebarView.prototype.template = 'sidebar';

    SidebarView.prototype.handleNavigationStates = function(route) {
      var $el;
      route = route.replace('route:', '');
      $el = $('nav a[href="/#' + route + '"]').parent();
      if (!$el.hasClass("active")) {
        $("nav li.active").removeClass("active");
        return $el.addClass("active");
      }
    };

    SidebarView.prototype.afterRender = function() {
      var _this = this;
      this.loadAppName();
      Backbone.history.bind("all", function(route) {
        return _this.handleNavigationStates(Backbone.history.fragment);
      });
      this.loadPlugins();
      return SidebarView.__super__.afterRender.apply(this, arguments);
    };

    SidebarView.prototype.loadAppName = function() {
      return hoodieAdmin.app.getInfo().then(this.renderAppName);
    };

    SidebarView.prototype.renderAppName = function(appInfo) {
      this.appInfo = appInfo;
      this.$el.find('header .appName a').text(this.appInfo.name);
      return $('.sidebar header .appName').bigtext({
        maxfontsize: 20
      });
    };

    SidebarView.prototype.getUserPluginLabel = function(totalUsers) {
      this.totalUsers = totalUsers;
      switch (this.totalUsers) {
        case 0:
          return this.label = "No users";
        case 1:
          return this.label = "One user";
        default:
          return this.label = "" + this.totalUsers + " users";
      }
    };

    SidebarView.prototype.updateUserCount = function(eventName, userObject) {
      var _this = this;
      return $.when(hoodieAdmin.users.getTotal()).then(function(totalUsers) {
        _this.totalUsers = totalUsers;
        return $('.sidebar .plugins .users .name').text(_this.getUserPluginLabel(_this.totalUsers));
      });
    };

    SidebarView.prototype.loadPlugins = function() {
      var debouncedUserCount;
      debouncedUserCount = _.debounce(this.updateUserCount, 300);
      hoodieAdmin.users.on("change", function(eventName, userObject) {
        return debouncedUserCount(eventName, userObject);
      });
      hoodieAdmin.users.connect();
      return $.when(hoodieAdmin.plugins.findAll(), hoodieAdmin.users.getTotal()).then(this.renderPlugins);
    };

    SidebarView.prototype.renderPlugins = function(plugins, totalUsers) {
      var key, plugin, _ref;
      this.plugins = plugins;
      this.totalUsers = totalUsers;
      _ref = this.plugins;
      for (key in _ref) {
        plugin = _ref[key];
        plugin.url = plugin.name;
        plugin.cleanName = plugin.title;
        if (plugin.cleanName === "Users") {
          plugin.cleanName = this.getUserPluginLabel(this.totalUsers);
        }
        plugin.badgeStatus = 'badge-' + plugin.status;
        if (plugin.messages) {
          plugin.messageAmount = plugin.messages.length;
        } else {
          plugin.messageAmount = '';
        }
      }
      return this.$el.find('nav ul.plugins').html(JST['sidebar-plugins'](this));
    };

    return SidebarView;

  })(Pocket.BaseView);

}).call(this);
