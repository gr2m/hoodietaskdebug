(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Pocket.Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.routes = {
      "": "dashboard",
      "plugins/:pluginName": "plugins",
      "plugins/:pluginName/*subroute": "plugins"
    };

    Router.prototype.dashboard = function() {
      var view;
      console.log("dashboard: ");
      view = new Pocket.DashboardView;
      pocket.app.views.body.setView(".main", view);
      return $.when(hoodieAdmin.app.getStats(1358610679), hoodieAdmin.config.get()).then(function(stats, appConfig) {
        view.stats = stats;
        view.appConfig = appConfig;
        return view.render();
      });
    };

    Router.prototype.plugins = function(pluginName, subroute) {
      var _this = this;
      console.log("plugins: ", pluginName, subroute);
      if (!Pocket.Routers) {
        Pocket.Routers = {};
      }
      return hoodieAdmin.plugins.getConfig(pluginName).then(function(config) {
        var pluginViewName, view;
        pluginViewName = _this.capitaliseFirstLetter(pluginName) + "View";
        view = new Pocket.PluginsView;
        pocket.app.views.body.setView(".main", view);
        view.plugin = {
          name: pluginName,
          config: config
        };
        return view.render();
      });
    };

    Router.prototype.capitaliseFirstLetter = function(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    };

    return Router;

  })(Backbone.Router);

}).call(this);
